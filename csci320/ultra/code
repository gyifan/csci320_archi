Exercise 1: Subtract

MEM[3] = 16'b10;
MEM[4] = 16'b1;
MEM[10] = 16'b0000010000000011;
MEM[11] = 16'b0000100000000100;
MEM[12] = 16'b0101010110000000;
MEM[13] = 16'b0011010000000101;
MEM[14] = 16'b1100000000001100;


Exercise 2: Multiply

MEM[0] = 16'b0101; // 5
MEM[1] = 16'b110;  // 6
MEM[2] = 16'b1111111111111011; // -5
MEM[3] = 16'b1111111111111010; // -6
MEM[4] = 16'b0000000010000000; // 128
MEM[5] = 16'b0000000100000000; // 256
MEM[10] = 16'b0000100000000000; // LOAD R2, 0
MEM[11] = 16'b0000110000000001; // LOAD R3, 1
MEM[12] = 16'b1000011011000000; // MUL R1, R2, R3  5*6
MEM[13] = 16'b0000100000000010; // LOAD R2, 2
MEM[14] = 16'b0000110000000001; // LOAD R3, 1
MEM[15] = 16'b1000011011000000; // MUL R1, R2, R3  -5*6
MEM[16] = 16'b0000100000000000; // LOAD R2, 0
MEM[17] = 16'b0000110000000011; // LOAD R3, 3
MEM[18] = 16'b1000011011000000; // MUL R1, R2, R3  5*-6
MEM[19] = 16'b0000100000000010; // LOAD R2, 2
MEM[20] = 16'b0000110000000011; // LOAD R3, 3
MEM[21] = 16'b1000011011000000; // MUL R1, R2, R3 -5*-6
MEM[22] = 16'b0000100000000100; // LOAD R2, 4
MEM[23] = 16'b0000110000000100; // LOAD R3, 4
MEM[24] = 16'b1000011011000000; // MUL R1, R2, R3 128*128
MEM[25] = 16'b0000100000000100; // LOAD R2, 4
MEM[26] = 16'b0000110000000101; // LOAD R3, 5
MEM[27] = 16'b1000011011000000; // MUL R1, R2, R3 128*256
MEM[28] = 16'b0000100000000101; // LOAD R2, 5
MEM[29] = 16'b0000110000000101; // LOAD R3, 5
MEM[30] = 16'b1000011011000000; // MUL R1, R2, R3 256*256
MEM[31] = 16'b0000100000000100; // LOAD R2, 4
MEM[32] = 16'b1000011000000000; // MUL R1, R2, R0 128*0


Exercise 3: Branch

MEM[3] = 16'b10; // 2
MEM[4] = 16'b01; // 1
MEM[10] = 16'b0000010000000011; // LOAD R1, 3
MEM[11] = 16'b0000100000000100; // LOAD R2, 4
MEM[12] = 16'b1110000110000010; // BNE R1, R2, 2
MEM[13] = 16'b0100010110000000; // ADD R1, R1, R2
MEM[14] = 16'b0010010000000101; // STORE R1, 5
MEM[15] = 16'b0100010010000000; // ADD R1, R0, R2
MEM[16] = 16'b1101000110000010; // BEQ R1, R2, 2
MEM[17] = 16'b1100000000001010; // JUMP 10
MEM[18] = 16'b0010010000000110; // STORE R1, 6
MEM[19] = 16'b0001010000000100; // LOADI R1, 4
MEM[20] = 16'b1111001001111010; // BLT R2, R1, -6
MEM[21] = 16'b1100000000001100; // JUMP 12


Exercise 4: Compute CPI for Ultra3

MEM[3] = 16'b10; // 2
MEM[4] = 16'b01; // 1
MEM[10] = 16'b0001110000000010; // LOADI R3, 2
MEM[11] = 16'b0000101100000010; // LOAD R2, (2)R3
MEM[12] = 16'b0000010000000011; // LOAD R1, 3
MEM[13] = 16'b1110000110000010; // BNE R1, R2, 2
MEM[14] = 16'b0100010110000000; // ADD R1, R1, R2
MEM[15] = 16'b0010010000000101; // STORE R1, 5
MEM[16] = 16'b0100010010000000; // ADD R1, R0, R2
MEM[17] = 16'b1101000110000010; // BEQ R1, R2, 2
MEM[18] = 16'b1100000000001010; // JUMP 10
MEM[19] = 16'b0010011100000110; // STORE R1, (6)R3
MEM[20] = 16'b0001010000000100; // LOADI R1, 4
MEM[21] = 16'b1111001001000001; // BLT R2, R1, 1
MEM[22] = 16'b1100001100010101; // JUMP (21)R3
MEM[23] = 16'b1100000000011000; // JUMP 24
MEM[24] = 16'b0101011011000000; // SUB R1, R2, R3
MEM[25] = 16'b1100000001110001; // RJUMP -15
